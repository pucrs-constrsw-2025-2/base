networks:
  constrsw:

volumes:
  # No terminal, criar o volume externo: docker volume create constrsw-keycloak-data
  constrsw-keycloak-data:
    external: true
  # No terminal, criar o volume externo: docker volume create constrsw-postgresql-data
  constrsw-postgresql-data:
    external: true
  # No terminal, criar os volumes externos: docker volume create constrsw-sonarqube-data && docker volume create constrsw-sonarqube-extensions && docker volume create constrsw-sonarqube-logs
  constrsw-sonarqube-data:
    external: true
  constrsw-sonarqube-extensions:
    external: true
  constrsw-sonarqube-logs:
    external: true

services:
  keycloak:
    container_name: keycloak
    build:
      context: backend/utils/keycloak
      dockerfile: Dockerfile
    image: constrsw/keycloak
    environment:
      - KC_HEALTH_ENABLED=${KC_HEALTH_ENABLED:-true}
      - KC_METRICS_ENABLED=${KC_METRICS_ENABLED:-true}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin123}
    volumes:
      - constrsw-keycloak-data:/opt/keycloak/data
      - ./backend/utils/keycloak:/opt/keycloak/data/import
    networks:
      - constrsw
    ports:
      - ${KEYCLOAK_EXTERNAL_CONSOLE_PORT:-8080}:${KEYCLOAK_INTERNAL_CONSOLE_PORT:-8080}
    command: start-dev --import-realm
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://keycloak:9000/health/ready || exit 1"]
      start_period: 10s
      interval: 10s
      timeout: 10s
      retries: 50

  postgresql:
    container_name: postgresql
    build:
      context: ./backend/utils/postgresql/
      dockerfile: Dockerfile
      args:
        POSTGRESQL_HOST_AUTH_METHOD: ${POSTGRESQL_HOST_AUTH_METHOD:-trust}
        POSTGRESQL_DATA: ${POSTGRESQL_DATA:-/var/lib/postgresql/data}
        POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME:-postgres}
        POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD:-postgres123}
    image: constrsw/postgresql
    environment:
      - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST:-postgresql}
      - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT:-5432}
      - POSTGRES_USER=${POSTGRESQL_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD:-postgres123}
      - POSTGRESQL_DB=${POSTGRESQL_DB:-constrsw}
    volumes:
      - constrsw-postgresql-data:${POSTGRESQL_DATA:-/var/lib/postgresql/data}
    networks:
      - constrsw
    ports:
      - ${POSTGRESQL_EXTERNAL_PORT:-5432}:${POSTGRESQL_INTERNAL_PORT:-5432}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRESQL_USERNAME:-postgres}"]
      start_period: 30s
      interval: 20s
      timeout: 10s
      retries: 10
    restart: always

  sonarqube:
    container_name: sonarqube
    image: sonarqube:latest
    environment:
      - SONAR_WEB_HOST=${SONAR_WEB_HOST:-0.0.0.0}
      - SONAR_WEB_PORT=${SONAR_WEB_PORT:-9000}
      - SONAR_WEB_CONTEXT=${SONAR_WEB_CONTEXT:-/}
      - SONAR_JDBC_URL=jdbc:postgresql://${POSTGRESQL_INTERNAL_HOST:-postgresql}:${POSTGRESQL_INTERNAL_PORT:-5432}/sonar
      - SONAR_JDBC_USERNAME=${POSTGRESQL_USERNAME:-postgres}
      - SONAR_JDBC_PASSWORD=${POSTGRESQL_PASSWORD:-postgres123}
      - SONARQUBE_USER=${SONARQUBE_USER:-admin}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD:-admin123}
    volumes:
      - constrsw-sonarqube-data:/opt/sonarqube/data
      - constrsw-sonarqube-extensions:/opt/sonarqube/extensions
      - constrsw-sonarqube-logs:/opt/sonarqube/logs
    networks:
      - constrsw
    ports:
      - "9000:9000"
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f ${SONARQUBE_INTERNAL_PROTOCOL:-http}://${SONARQUBE_INTERNAL_HOST:-sonarqube}:${SONARQUBE_INTERNAL_PORT:-9000}/api/system/status || exit 1",
        ]
      start_period: 120s
      interval: 30s
      timeout: 10s
      retries: 10
    restart: always

  oauth:
    container_name: oauth
    build:
      context: backend/oauth
      dockerfile: Dockerfile
    image: constrsw/oauth
    networks:
      - constrsw
    ports:
      - "3000:3000"
    environment:
      - KEYCLOAK_URL=${KEYCLOAK_INTERNAL_PROTOCOL:-http}://${KEYCLOAK_INTERNAL_HOST:-keycloak}:${KEYCLOAK_INTERNAL_API_PORT:-8080}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-constrsw}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-constrsw-frontend}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET:-your-client-secret-here}
      - KEYCLOAK_GRANT_TYPE=${KEYCLOAK_GRANT_TYPE:-authorization_code}
      - KEYCLOAK_ADMIN_CLIENT_ID=admin-cli
      - KEYCLOAK_ADMIN_USERNAME=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin123}
    depends_on:
      keycloak:
        condition: service_healthy
    restart: always
    volumes:
      - ./backend/oauth:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev

  frontend:
    container_name: frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:3000}
        - VITE_KEYCLOAK_URL=${VITE_KEYCLOAK_URL:-http://localhost:8080}
        - VITE_KEYCLOAK_REALM=${VITE_KEYCLOAK_REALM:-constrsw}
        - VITE_KEYCLOAK_CLIENT_ID=${VITE_KEYCLOAK_CLIENT_ID:-constrsw-frontend}
    env_file:
      - ./frontend/.env
    image: constrsw/frontend
    networks:
      - constrsw
    ports:
      - ${FRONTEND_EXTERNAL_PORT:-3001}:${FRONTEND_INTERNAL_PORT:-80}
    depends_on:
      keycloak:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3
